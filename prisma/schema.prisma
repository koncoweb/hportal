// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  patient       Patient?
  doctor        Doctor?
  finance       Finance?
  pharmacist    Pharmacist?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id            String        @id @default(cuid())
  userId        String        @unique
  dateOfBirth   DateTime?
  phoneNumber   String?
  address       String?
  medicalHistory String?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
}

model Doctor {
  id            String        @id @default(cuid())
  userId        String        @unique
  specialization String
  qualification String
  experience    Int
  bio           String?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments  Appointment[]
  schedules     Schedule[]
  departments   Department[]  @relation("DoctorToDepartment")
}

model Appointment {
  id          String    @id @default(cuid())
  patientId   String
  doctorId    String
  scheduleId  String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  patient     Patient   @relation(fields: [patientId], references: [id])
  doctor      Doctor    @relation(fields: [doctorId], references: [id])
  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
}

model Schedule {
  id          String        @id @default(cuid())
  doctorId    String
  dayOfWeek   Int           // 0 = Sunday, 1 = Monday, etc.
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean       @default(true)
  doctor      Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  doctors     Doctor[]  @relation("DoctorToDepartment")
}

model Finance {
  id            String    @id @default(cuid())
  userId        String    @unique
  department    String
  position      String
  experience    Int
  specialization String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pharmacist {
  id            String    @id @default(cuid())
  userId        String    @unique
  licenseNumber String
  specialization String
  experience    Int
  education     String
  certifications String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
  FINANCE
  PHARMACIST
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
